CXX = g++
CXXFLAGS = -g -I. -I$(SHAWN_INCLUDE_DIR)/src -I$(SHAWN_INCLUDE_DIR)/buildfiles \
	-I$(WISELIB_PATH_TESTING) -I$(WISELIB_PATH) -I$(WISELIB_BASE)/doc \
	-I/usr/local/lib -I/opt/local/lib \
	-Wall -Wno-unknown-pragmas -Wno-sign-compare -DNDEBUG \
	-DOSMODEL=ShawnOsModel -DSHAWN $(ADD_CXXFLAGS) \
	-DCHECK_CONCEPTS
LDFLAGS = -L$(SHAWN_LIB_DIR) $(SHAWN_LINK_LIBS)

OUTPUT = out/shawn
OUTBIN = .

%.d: %.cpp
	$(SHELL) -ec '$(CXX) -MM $(CXXFLAGS) $< \
		| sed -e '\''1s|^|$$(OUTPUT)/|'\'' -e '\''s/\($*\)\.o[ :]*/\1.o $@ : /g'\'' > $@; \
		[ -s $@ ] || rm -f $@'


shawn: $(OUTBIN)/$(BIN_OUT)

vpath %.cpp $(WISELIB_PATH)/external_interface/shawn/standalone

SHAWN_SRCS = shawn_standalone_init.cpp \
		shawn_standalone_processor.cpp \
		shawn_standalone_processor_factory.cpp \
		$(APP_SRC)

SHAWN_OBJS = $(patsubst %.cpp,$(OUTPUT)/%.o,$(SHAWN_SRCS))
include $(SHAWN_SRCS:.cpp=.d)

$(SHAWN_OBJS): $(OUTPUT)/%.o : %.cpp
	@mkdir -p $(OUTPUT)
	$(CXX) $(CXXFLAGS) -o $@ -c $<

$(OUTBIN)/$(BIN_OUT): $(SHAWN_OBJS)
	@echo "linking..."
	$(CXX) $(SHAWN_OBJS) \
		-o $(OUTBIN)/$(BIN_OUT) $(LDFLAGS)
